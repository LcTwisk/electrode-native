{{#description}}
/**
{{{description}}}
*/
{{/description}}
@objc public class {{classname}}: ElectrodeObject, Bridgeable {
    private static let tag = String(describing: type(of: self))

    {{#models}}
    {{#model}}
    {{#enums}}
    @objc public enum {{datatypeWithEnum}}: Int, RawRepresentable { 
        {{#allowableValues}}
        {{#values}}
        case {{^isString}}option{{/isString}}{{enum}}
        {{/values}}
        case none
        
        public typealias RawValue = {{datatype}}

        public var rawValue: RawValue {
            switch self {
                {{#values}}
                case .{{^isString}}option{{/isString}}{{enum}}:
                    return {{#isString}}"{{raw}}"{{/isString}}{{^isString}}{{raw}}{{/isString}}
                {{/values}}
                case .none:
                    return {{#isString}}"-1"{{/isString}}{{^isString}}-1{{/isString}}
            }
        }

        public init?(rawValue: RawValue) {
            switch rawValue {
                {{#values}}
                case {{#isString}}"{{raw}}"{{/isString}}{{^isString}}{{raw}}{{/isString}}:
                    self = .{{^isString}}option{{/isString}}{{enum}}
                {{/values}}
                default:
                    return nil
            }
        }        
        {{/allowableValues}}
    }

    {{/enums}}
    {{#vars}}
    {{#description}}
    /**
     {{{description}}}
     */
    {{/description}}
    @objc public let {{name}}: {{{datatypeWithEnum}}}{{^required}}{{^isEnum}}?{{/isEnum}}{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
    {{/vars}}

    @objc public init({{#allVars}}{{^-first}}, {{/-first}}{{name}}: {{datatypeWithEnum}}{{^required}}{{^isEnum}}?{{/isEnum}}{{/required}}{{/allVars}}) {
        {{#allVars}}
        self.{{name}} = {{name}}
        {{/allVars}}
        super.init()
    }

    @objc public override init() {
        {{#requiredVars}}
        self.{{name}} = {{#isEnum}}.none{{/isEnum}}{{^isEnum}}{{datatype}}(){{/isEnum}}
        {{/requiredVars}}
        {{#optionalVars}}
        self.{{name}} = {{#isEnum}}.none{{/isEnum}}{{^isEnum}}nil{{/isEnum}}
        {{/optionalVars}}
        super.init()
    }

    @objc required public init(dictionary: [AnyHashable: Any]) {
        {{#requiredVars}}{{#isNotContainer}}if let {{name}}{{^isPrimitiveType}}Dict{{/isPrimitiveType}} = dictionary["{{name}}"] as? {{#isPrimitiveType}}{{datatype}}{{/isPrimitiveType}}{{^isPrimitiveType}}[AnyHashable: Any]{{/isPrimitiveType}}{{#isEnum}}, let {{name}}Case = {{datatypeWithEnum}}(rawValue: {{name}}){{/isEnum}} {
            self.{{name}} = {{^isPrimitiveType}}{{datatype}}(dictionary: {{name}}Dict){{/isPrimitiveType}}{{#isPrimitiveType}}{{name}}{{#isEnum}}Case{{/isEnum}}{{/isPrimitiveType}}
        } else {
            assertionFailure("\({{classname}}.tag) missing one or more required properties [{{name}}] ")
            self.{{name}} = dictionary["{{name}}"] as! {{datatypeWithEnum}}
        }{{/isNotContainer}}
        {{^isNotContainer}}if let valid{{nameInCamelCase}} = try? NSObject.generateObject(data: dictionary["{{name}}"], classType: Array<Any>.self, itemType: {{complexType}}.self),
            let {{baseName}}List = valid{{nameInCamelCase}} as? {{datatype}}  {
                self.{{name}} = {{baseName}}List
        } else {
            assertionFailure("\({{classname}}.tag) missing one or more required properties[{{name}}]")
            self.{{name}} = dictionary["{{name}}"] as! {{datatypeWithEnum}}
        }{{/isNotContainer}}{{/requiredVars}}
        {{#optionalVars}}{{#isNotContainer}}if let {{name}}{{^isPrimitiveType}}Dict{{/isPrimitiveType}} = dictionary["{{name}}"] as? {{#isPrimitiveType}}{{datatype}}{{/isPrimitiveType}}{{^isPrimitiveType}}[AnyHashable: Any]{{/isPrimitiveType}}{{#isEnum}}, let {{name}}Case = {{datatypeWithEnum}}(rawValue: {{name}}){{/isEnum}} {
            self.{{name}} = {{^isPrimitiveType}}{{datatype}}(dictionary: {{name}}Dict){{/isPrimitiveType}}{{#isPrimitiveType}}{{name}}{{#isEnum}}Case{{/isEnum}}{{/isPrimitiveType}}
        } else {
            self.{{name}} = {{#isEnum}}.none{{/isEnum}}{{^isEnum}}nil{{/isEnum}}
        }{{/isNotContainer}}
        {{^isNotContainer}}if let valid{{nameInCamelCase}} = try? NSObject.generateObject(data: dictionary["{{name}}"], classType: Array<Any>.self, itemType: {{complexType}}.self),
            let {{baseName}}List = valid{{nameInCamelCase}} as? {{datatype}}  {
                self.{{name}} = {{baseName}}List
        } else {
            self.{{name}} = {{#isEnum}}.none{{/isEnum}}{{^isEnum}}nil{{/isEnum}}
        }{{/isNotContainer}}{{/optionalVars}}
        super.init(dictionary: dictionary)
    }

    @objc public func toDictionary() -> NSDictionary {
        var dict = [:] as [AnyHashable: Any]
        {{#requiredVars}}
        dict["{{name}}"] = self.{{name}}{{#isEnum}}.rawValue{{/isEnum}}{{^isPrimitiveType}}{{#isNotContainer}}.toDictionary(){{/isNotContainer}}{{^isNotContainer}}.map{$0.toDictionary()}{{/isNotContainer}}{{/isPrimitiveType}}
        {{/requiredVars}}
        {{#optionalVars}}
        {{^isEnum}}if let nonNull{{nameInCamelCase}} = self.{{name}} {
                dict["{{name}}"] = nonNull{{nameInCamelCase}}{{^isPrimitiveType}}{{#isNotContainer}}.toDictionary(){{/isNotContainer}}{{^isNotContainer}}.map{$0.toDictionary()}{{/isNotContainer}}{{/isPrimitiveType}}
        }{{/isEnum}}
        {{#isEnum}}if self.{{name}} != .none {
                dict["{{name}}"] = self.{{name}}.rawValue
        }{{/isEnum}}
        {{/optionalVars}}
        return dict as NSDictionary
    }
}{{/model}}
{{/models}}

